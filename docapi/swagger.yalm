swagger: '2.0'
info:
  description: >-
    avaliacao, xxxxxxxx.
  version: 0.0.1
  title: avaliacao - The API
  termsOfService: 'http://avaliacao.com/'
  contact:
    email: jeff.otoni@s3wf.com.br
host: api.avaliacao.com
basePath: /v1
tags:
  - name: test
    description: Methods to test api
  - name: user
    description: Methods for accessing user accounts
  - name: file
    description: Methods to make your uploads and downloads
schemes:
  - http
  - https
paths:
  /test/ping:
    post:
      tags:
        - test
      summary: 'The method is public and open does not need authentication, to know if the service is online'
      description: 'curl -X POST api.avaliacao.com/v1/test/ping'
      produces:
        - text/plain
      responses:
        '200':
          description: pong
          schema:
            type: string
            items:
              $ref: '#/definitions/Test'
        '404':
          $ref: '#/responses/Standard404ErrorResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'

  /test/hello:
    post:
      tags:
        - test
      summary: The Hello method is a handler to test your token, it will receive the token as a parameter, if the token is correct it will return a hello, otherwise it will return an error.
      description: 'curl -X POST api.avaliacao.com/v1/test/hello -H "Authorization: Bearer {token}"'
      produces:
        - application/json
      parameters:
        - name: 'Authorization: Bearer'
          in: header
          description: 'Authorization: Bearer {token}'
          required: true
          type: string
          format: string
      responses:
        '200':
          description: '{"status":"ok","msg":"Hello, welcome."}'
          schema:
            type: array
            items:
              $ref: '#/definitions/TestHello'
        '401':
          $ref: '#/responses/Standard401ErrorResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  /user:
    post:
      tags:
        - user
      summary: Creating a new user
      description: 'curl -X POST api.avaliacao.com/v1/user -H "Content-Type: application/json" -H "X-Key: {xxx}" -d @example/createuser.json'
      produces:
        - application/json
      parameters:
        - name: 'X-Key'
          in: header
          description: access key to public api
          required: true
          type: string
          format:  string
        - name: 'name'
          in: query
          description: name user
          required: true
          type: string
          format:  string
        - name: 'lastname'
          in: query
          description: last name user
          required: true
          type: string
          format:  string
        - name: 'email'
          in: query
          description: email user
          required: true
          type: string
          format:  string  
        - name: 'password'
          in: query
          description: password user
          required: true
          type: string
          format:  string
        - name: 'country'
          in: query
          description: country user
          required: true
          type: string
          format:  string
        - name: 'birth'
          in: query
          description: birth user
          required: true
          type: string
          format:  string
        - name: 'contract'
          in: query
          description: contract user
          required: true
          type: string
          format:  string  
      responses:
        '200':
          description: '{"status":"success","msg":"ok","name":"jefferson","email":"emailuser@gmail.com"}'
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '401':
          $ref: '#/responses/Standard401ErrorResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  /user/confirm_email:
    post:
      tags:
        - user
      summary: 'The email confirmation is date by the browser'
      description: 'The email confirmation is date by the browser and an html is opened for the user on the screen'
      produces:
        - application/json
      responses:
        '200':
          description: 'opens in the browser the confirmation of the email with success or error.'
          schema:
            $ref: '#/definitions/UserGeral'
        '401':
          $ref: '#/responses/Standard401ErrorResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  /user/close_account:
    post:
      tags:
        - user
      summary: this method enables the complete removal of the user after 24 hours if the user does not manifest 
      description: 'curl -X POST api.avaliacao.com/v1/user/close_account -H "Content-Type: application/json" -H "Authorization: Bearer {token}" -d {"email":"mail@mail.com","key":"keyUser"}'
      produces: 
        - application/json
      parameters:
        - name: 'Authorization: Bearer'
          in: header
          description: 'Authorization: Bearer {token}'
          required: true
          type: string
          format: string
        - name: 'email'
          in: query
          description: 'email to user'
          required: true
          type: string
          format: string  
        - name: 'key'
          in: query
          description: 'key to user'
          required: true
          type: string
          format: string
      responses:
        '200':
          description: '{"status":"success","msg":"ok"}'
          schema:
            type: array
            items:
             $ref: '#/definitions/UserGeral'
        '401':
          $ref: '#/responses/Standard401ErrorResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  /user/restore_account:
    post:
      tags:
        - user
      summary: This handler resets the user account, it updates the user account, but will only work if the account is within 24 hours of the account closure request
      description: 'This handler schedules the user to be removed from the system'
      produces: 
        - application/json
      parameters:
        - name: 'm'
          in: query
          description: 'Would be encrypted email'
          required: true
          type: string
          format: string
        - name: 'a'
          in: query
          description: 'A single access key a constant will be authenticated by the GetXKeyUrl method'
          required: true
          type: string
          format: string
      responses:
        '200':
          description: 'Has been successfully restored!'
          schema:
            type: string
        '401':
          $ref: '#/responses/Standard401ErrorResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  /user/disable:
    put:
      tags:
        - user
      summary: This handler only makes an update on the users status, disabling only.
      description: 'curl -X PUT api.avaliacao.com/V1/user/disable -H "Authorization: Bearer {tokem}"-d "user=mail@mail.com"'
      produces:
        - application/json
      parameters:
        - name: 'Authorization: Bearer {tokem}'
          in: header
          description: 'Header Authorization: Bearer'
          required: true
          type: string
          format: string
      responses:
        '200':
          description: '{"status":"ok","msg":"Account disabled successfully!"}'
          schema:
            type: array
            items:
              $ref: '#/definitions/UserGeral'
        '401':
          $ref: '#/responses/Standard401ErrorResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  /user/enable:
    put:
      tags:
        - user
      summary: This handler is responsible for reactivating the status of the user, so that he returns access to all available handlers and his account normally.
      description: 'curl -X PUT api.avaliacao.com/V1/user/enable -H "Authorization: Bearer {tokem}"-d "user=mail@mail.com"'
      produces:
        - application/json
      parameters:
        - name: 'Authorization: Bearer {tokem}'
          in: header
          description: 'Header Authorization: Bearer'
          required: true
          type: string
          format: string
      responses:
        '200':
          description: '{"status":"ok","msg":"Account enabled with successfully!"}'
          schema:
            type: array
            items:
              $ref: '#/definitions/UserGeral'
        '401':
          $ref: '#/responses/Standard401ErrorResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  /file/upload:
    post:
      tags:
        - file
      summary: 'The field name of the form is "file", for uploads. This handler will allow you to upload using the form for this.'
      description: 'curl -X POST api.avaliacao.com/v1/file/upload -H "Authorization: Bearer {token}" --form "file=@namefile.pdf"'
      produces:
        - multipart/form-data
      parameters:
        - name: 'Authorization: Bearer {tokem}'
          in: header
          description: 'Header Authorization: Bearer'
          required: true
          type: string
          format: string
        - name: 'file'
          in: query
          description: 'field of input form data'
          required: true
          type: string
          format: binary
      responses:
        '200':
          description: '{"status":"ok","msg":"upload your file successfully","size":"size file","name":"nameFile.ext","id":"uuid file"}'
          schema:
            type: array
            items:
              $ref: '#/definitions/File'
        '401':
          $ref: '#/responses/Standard401ErrorResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  /file:
    delete:
      tags:
        - file
      summary: 'This handler does a logical removal only, it sends the files to the trash.'
      description: 'curl -X DELETE api.avaliacao.com/v1/file -H "Authorization: Bearer {token}" -F "id={uuid}" '
      produces:
        - application/json
      parameters:
        - name: 'Authorization: Bearer {tokem}'
          in: header
          description: 'Header Authorization: Bearer'
          required: true
          type: string
          format: string
        - name: 'id'
          in: query
          description: 'Uuid file of database'
          required: true
          type: string
          format: string
      responses:
        '200':
          description: '{"status":"ok","msg":"successfully removed definitely!"}'
          schema:
            type: array
            items:
              $ref: '#/definitions/File'
        '401':
          $ref: '#/responses/Standard401ErrorResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  /file/remove_trash:
    delete:
      tags:
        - file
      summary: 'This handler does a physical removal, it deletes from the bucket and also the database reference.'
      description: 'curl -X DELETE api.avaliacao.com/v1/file/remove_trash -H "Authorization: Bearer {token}" -F "id={uid}" '
      produces:
        - application/json
      responses:
        '200':
          description: '{"status":"ok","msg":"successfully removed definitely!"}'
          schema:
            type: array
            items:
              $ref: '#/definitions/File'
        '401':
          $ref: '#/responses/Standard401ErrorResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  /file/download:
    get:
      tags:
        - file
      summary: This handler is responsible for downloading the file that is on the server.
      description: 'curl -X GET -o namefile.ext api.avaliacao.com/v1/file/download -H "Content-Type: application/json" -H "Authorization: Bearer {token}" -d {"id":"uidfile"}'
      produces:
        - application/json
      parameters:
        - name: 'Authorization: Bearer {tokem}'
          in: header
          description: 'Header Authorization: Bearer'
          required: true
          type: string
          format: string
        - name: 'id'
          in: query
          description: 'Uuid file of database'
          required: true
          type: string
          format: string
      responses:
        '200':
          description: success
          schema:
            type: string
            items:
              $ref: '#/definitions/File'
        '401':
          $ref: '#/responses/Standard401ErrorResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
definitions:
  Test:
    type: object
    properties:
      msg:
        type: string
  TestHello:
    type: object
    properties:
      status:
        type: string
        format: string
        description: reply message
      msg:
        type: string
        format: string
        description: reply message 
  User:
    type: object
    properties:
      status:
        type: string
        format: string
        description: reply message
      msg:
        type: string
        format: string
        description: reply message
      name:
        type: string
        format: string
        description: reply message
      email:
        type: string
        format: string
        description: reply message
  UserGeral:
    type: object
    properties:
      status:
        type: string
        format: string
        description: reply message
      msg:
        type: string
        format: string
        description: reply message
  File:
    type: object
    properties:
      status:
        type: string
        format: string
        description: reply message
      msg:
        type: string
        format: string
        description: reply message
      name:
        type: string
        format: string
        description: reply message  
      size:
        type: string
        format: string
        description: reply message
      id:
        type: string
        format: string
        description: reply message
responses:
  Standard404ErrorResponse: 
    description: Not found
  Standard500ErrorResponse:
    description: Error of server
  Standard401ErrorResponse:
    description: Access Token invalid.
externalDocs:
  description: In order to get your keys you need to log into the system and go into profile, generate tokens.
url: 'https://avaliacao.com'